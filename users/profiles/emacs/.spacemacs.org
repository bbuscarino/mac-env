#+TITLE: Emacs config
#+AUTHOR: Ben Buscarino
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Layers
  :PROPERTIES:
  :ID:       24fe628c-f4ac-4269-a843-d494a984582b
  :END:

#+begin_src emacs-lisp

  ;;; -*- mode: emacs-lisp -*-
  (defun dotspacemacs/layers ()
    "Configuration Layers declaration.
  You should not put any user code in this function besides modifying the variable
  values."
#+end_src
** Layer configuration
#+begin_src emacs-lisp
      (setq-default
       dotspacemacs-distribution 'spacemacs
       dotspacemacs-enable-lazy-installation 'unused
       ;; List of additional paths where to look for configuration layers (i.e. `~/.mycontribs/')
       dotspacemacs-configuration-layer-path '()
       )
#+end_src
** Layer list
#+begin_src emacs-lisp
    (setq-default
     dotspacemacs-configuration-layers
     '(;; Fundamentals
       (ibuffer :variables ibuffer-group-buffers-by 'projects)
       templates
       (treemacs :variables treemacs-use-git-mode 'deferred)
       copy-as-format
       dap
       ;; OS
       nixos
       ;; Tools
       cmake
       docker
       nginx
       prodigy
       (org :variables
            org-projectile-file "TODOS.org"
            org-support-shift-select t
            org-enable-github-support t
            org-enable-reveal-js-support t
            org-enable-sticky-header t
            ;; org-journal
            org-enable-org-journal-support t
            org-journal-dir "~/org/journal/"
            org-journal-date-prefix "#+TITLE: "
            org-journal-date-format "%A, %B %d %Y"
            org-enable-roam-support t
            ;; org-jira
            org-enable-jira-support t
            jiralib-url "https://tracker.morsecorp.com"
            ;; org-agenda
            org-agenda-files (list "~/org/agenda/work.org"
                              "~/org/agenda/home.org")
            )
       spacemacs-org
       ;; LSP
       lsp
       ;; Languages & File types
       (python
        :variables
        python-backend 'lsp
        python-formatter 'black
        python-test-runner 'pytest
        python-lsp-server 'pyls)
       (haskell
        :variables
        haskell-completion-backend 'ghci)
       (c-c++
        :variables
        c-c++-backend 'lsp-clangd
        c-c++-enable-google-style t
        c-c++-enable-google-newline t)
       ;; (purescript :variables node-add-modules-path t)
       sql
       elm
       emacs-lisp
       html
       javascript
       markdown
       yaml
       rust
       ;; Completion
       (helm :variables helm-enable-auto-resize t)
       (auto-completion :variables auto-completion-enable-sort-by-usage t)
       (spell-checking :variables enable-flyspell-auto-completion t)
       syntax-checking
       ;; Source control
       (git
        :variables
        magit-repository-directories '(("~/Development/" . 4))
        )
       github
       version-control
       ;; Other fun stuff
       unicode-fonts
       (shell :variables
              shell-default-height 30
              shell-default-position 'bottom)
       emoji)
  )
#+end_src
** Additional Packages
#+begin_src emacs-lisp
  (setq-default
         ;; List of additional packages that will be installed
         dotspacemacs-additional-packages '(doom-themes
                                            direnv
                                            company-lsp
                                            gnu-elpa-keyring-update)
         dotspacemacs-frozen-packages '()
         dotspacemacs-excluded-packages '()
         dotspacemacs-install-packages 'used-only)
#+end_src

** Mac-specific configuration
#+begin_src emacs-lisp
        (when (spacemacs/system-is-mac)
          (append dotspacemacs-configuration-layers
                  '(osx)))
#+end_src
#+begin_src emacs-lisp
)
#+end_src
* Init
#+begin_src emacs-lisp
  (defun dotspacemacs/init ()
    "Initialization function.
  This function is called at the very startup of Spacemacs initialization
  before layers configuration.
  You should not put any user code in there besides modifying the variable
  values."
    ;; This setq-default sexp is an exhaustive list of all the supported
    ;; spacemacs settings.
    (setq-default
     package-check-signature nil
     dotspacemacs-elpa-https t
     dotspacemacs-elpa-timeout 5
     dotspacemacs-check-for-update nil
     dotspacemacs-elpa-subdirectory nil
     dotspacemacs-editing-style 'vim
     dotspacemacs-mode-line-theme 'spacemacs
     dotspacemacs-verbose-loading nil
     dotspacemacs-startup-banner 'official
     dotspacemacs-startup-lists '((recents . 5)
                                  (projects . 7)
                                  (todos . 5))
     dotspacemacs-startup-buffer-responsive t
     dotspacemacs-scratch-mode 'text-mode
     dotspacemacs-themes '(doom-one
                           doom-Iosvkem
                           doom-dark+
                           doom-nord
                           doom-palenight
                           doom-sourcerer
                           doom-spacegrey
                           doom-tomorrow-night
                           doom-vibrant
                           spacemacs-dark)
     dotspacemacs-colorize-cursor-according-to-state t
     dotspacemacs-default-font '("JetBrains Mono"
                                 :size 12
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.1)
     dotspacemacs-leader-key "SPC"
     dotspacemacs-emacs-command-key "SPC"
     dotspacemacs-ex-command-key ":"
     dotspacemacs-emacs-leader-key "M-m"
     dotspacemacs-major-mode-leader-key ","
     dotspacemacs-major-mode-emacs-leader-key "C-M-m"
     dotspacemacs-retain-visual-state-on-shift t
     dotspacemacs-default-layout-name "Default"
     ;; Files
     dotspacemacs-large-file-size 2
     dotspacemacs-auto-save-file-location 'cache
     dotspacemacs-max-rollback-slots 5
     ;; Helm
     dotspacemacs-helm-position 'bottom
     dotspacemacs-helm-use-fuzzy 'always
     ;; Other
     dotspacemacs-which-key-delay 0.4
     ;; Window behavior
     dotspacemacs-fullscreen-at-startup nil
     ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
     ;; Use to disable fullscreen animations in OSX. (default nil)
     dotspacemacs-fullscreen-use-non-native nil
     dotspacemacs-maximized-at-startup nil
     dotspacemacs-active-transparency 90
     dotspacemacs-inactive-transparency 90
     dotspacemacs-show-transient-state-title t
     dotspacemacs-show-transient-state-color-guide t
     dotspacemacs-mode-line-unicode-symbols t
     dotspacemacs-smooth-scrolling t
     dotspacemacs-folding-method 'evil
     dotspacemacs-highlight-delimiters 'all
     dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
     ;; Delete whitespace while saving buffer. Possible values are `all'
     ;; to aggressively delete empty line and long sequences of whitespace,
     ;; `trailing' to delete only the whitespace at end of lines, `changed'to
     ;; delete only whitespace for changed lines or `nil' to disable cleanup.
     ;; (default nil)
     dotspacemacs-whitespace-cleanup 'trailing
     ;; Extra stuff
     dotspacemacs-line-numbers t
     evil-kill-on-visual-paste nil
     ))

  (defun dotspacemacs/user-init ()
    "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before layer configuration
  executes.
   This function is mostly useful for variables that need to be set
  before packages are loaded. If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
    )

  (defun dotspacemacs/user-config ()
    "Configuration function for user code.
  This function is called at the very end of Spacemacs initialization after
  layers configuration.
  This is the place where most of your configurations should be done. Unless it is
  explicitly specified that a variable should be set before a package is loaded,
  you should place your code here."

   (direnv-mode)

  (defun fira-code-mode--make-alist (list)
    "Generate prettify-symbols alist from LIST."
    (let ((idx -1))
      (mapcar
       (lambda (s)
         (setq idx (1+ idx))
         (let* ((code (+ #Xe100 idx))
            (width (string-width s))
            (prefix ())
            (suffix '(?\s (Br . Br)))
            (n 1))
       (while (< n width)
         (setq prefix (append prefix '(?\s (Br . Bl))))
         (setq n (1+ n)))
       (cons s (append prefix suffix (list (decode-char 'ucs code))))))
       list)))

  (defconst fira-code-mode--ligatures
    '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
      "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
      "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
      "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
      ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
      "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
      "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
      "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
      ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
      "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
      "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
      "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
      "x" ":" "+" "+" "*"))

  (defvar fira-code-mode--old-prettify-alist)

  (defun fira-code-mode--enable ()
    "Enable Fira Code ligatures in current buffer."
    (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
    (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
    (prettify-symbols-mode t))

  (defun fira-code-mode--disable ()
    "Disable Fira Code ligatures in current buffer."
    (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
    (prettify-symbols-mode -1))

  (define-minor-mode fira-code-mode
    "Fira Code ligatures minor mode"
    :lighter " Fira Code"
    (setq-local prettify-symbols-unprettify-at-point 'right-edge)
    (if fira-code-mode
        (fira-code-mode--enable)
      (fira-code-mode--disable)))

  (defun fira-code-mode--setup ()
    "Setup Fira Code Symbols"
    (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

  (provide 'fira-code-mode)

  (if (eq system-type 'darwin)
      (mac-auto-operator-composition-mode)
    (add-hook 'prog-mode-hook 'fira-code-mode))
#+end_src
* Extra Configuration
** Secret Configuration
  Load secret configuration if the file is present
#+begin_src emacs-lisp
(if (file-exists-p "~/.spacemacs.secret")
    (load "~/.spacemacs.secret")
    (message "secret config not found")
    )
)
#+end_src
