#+TITLE: Emacs config
#+AUTHOR: Ben Buscarino
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Defaults
#+begin_src emacs-lisp
  (unless (eq window-system 'ns)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (save-place-mode 1)
  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; The default is very low - 4k, lsp responses are easily 1+ MB
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  ;; Accept 'y' and 'n' rather than 'yes' and 'no'.
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Always show line and column number in the mode line.
  (line-number-mode)
  (column-number-mode)
  ;; I typically want to use UTF-8.
  (prefer-coding-system 'utf-8)
  ;; Nicer handling of regions.
  (transient-mark-mode 1)
  ;; Make moving cursor past bottom only scroll a single line rather
  ;; than half a page.
  (setq scroll-step 1
        scroll-conservatively 5)
#+end_src
** Use-Package
#+begin_src emacs-lisp
  (setq package-archives nil)
  (setq package-enable-at-startup nil)
  ;; Package configs
  ;; Initialize [[https://github.com/jwiegley/use-package][use-package]].
  (require 'package)
  (package-initialize)
  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
** Evil
#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-mode 1))
#+end_src
** General
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-override-mode)
    ;; Custom definer
    (general-create-definer leader-def
    :prefix "SPC"))

#+end_src
** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one t))
#+end_src
* Interface enhancements
** Helm
#+begin_src emacs-lisp
(use-package helm
  :after general
  :init
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-list 50)
  (helm-mode 1)
  :config
  ;; Keybindings
  (leader-def
    :states 'normal
    "ff" '(helm-find-file :wk "Find file")))

(use-package helm-ag
  :after helm
  :config
  (setq helm-follow-mode-persistent t))
(use-package helm-swoop
  :after helm)
#+end_src
** Telephone Line
#+begin_src emacs-lisp
(use-package telephone-line
  :init
  (telephone-line-mode 1))

#+end_src
** Which Key
#+begin_src emacs-lisp
;; Which Key
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+end_src

** Selected.el
#+begin_src emacs-lisp
    (use-package selected
      :commands selected-minor-mode
      :init
      (selected-global-mode)
      :general
      "q" 'selected-off
      "u" 'upcase-region
      "d" 'downcase-region
      "w" 'count-words-region)
#+end_src
* Windows
#+begin_src emacs-lisp
(use-package ace-windows)
#+end_src
* File Management
#+begin_src emacs-lisp
(use-package dired)
(use-package dired-x)
(use-package recentf)
#+end_src
* Project Management
#+begin_src emacs-lisp
;; Projectile
(use-package projectile
  :after magit
  :config
  (projectile-mode +1)
  (setq projectile-sort-order 'recentf)
  ;; Use magit-indexed directories
  (mapc #'projectile-add-known-project
          (mapcar #'file-name-as-directory (magit-list-repos)))
    ;; Optionally write to persistent `projectile-known-projects-file'
    (projectile-save-known-projects)
  )
(use-package helm-projectile
  :after (projectile helm)
  :config
  (helm-projectile-on))
#+end_src

* Org
#+begin_src emacs-lisp
  (use-package org)
  (use-package org-bullets)
  (use-package org-present)
  (use-package org-projectile)
#+end_src

* Git
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-repository-directories
        '(("~/" . 2)))
  )
  (use-package forge
    :after magit)
#+end_src

* Programming
** Coding Assistance
#+begin_src emacs-lisp
   ;; LSP
  (use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
  (use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (haskell-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)

  ;; Completion
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)

  ;; Checking
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
** Languages
*** Nix
#+begin_src  emacs-lisp
  ;; Nix
  (use-package nix-mode)
  (use-package nixos-options
    :after (company nix-mode)
    :config
    (add-to-list 'company-backends 'company-nixos-options))
#+end_src
